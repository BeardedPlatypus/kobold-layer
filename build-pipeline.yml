trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  solution: '$(Build.SourcesDirectory)/kobold-layer.sln'
  toolsLocation: '$(Build.SourcesDirectory)\tools'

jobs:
- job: Debug

  variables:
    buildPlatform: 'x64'
    buildConfiguration: 'Debug'
    codeCoverageLocationRunsettings: '$(Build.SourcesDirectory)\code_coverage_loc.runsettings'
    testResults: '$(Build.SourcesDirectory)\TestResults'
    buildWrapperExe: '$(Build.SourcesDirectory)\tools\build-wrapper-win-x86-64.exe'
    buildWrapperOutputDir: '$(Build.SourcesDirectory)\build_wrapper_output_directory'
    msBuildExe: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'

  steps:
  - script: |
      vcpkg install sdl2:x64-windows sdl2-image:x64-windows gtest:x64-windows
      vcpkg integrate install
    displayName: vcpkg

  - task: NuGetToolInstaller@0
    displayName: 'Nuget - Install'

  - task: NuGetCommand@2
    displayName: 'Nuget - Restore Packages'
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: 'Build - Executables'
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      clean: true
      createLogFile: true
      logFileVerbosity: 'detailed'

  - task: CopyFiles@2
    displayName: 'Build - Copy DLLs'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/x64/$(buildConfiguration)/'
      Contents: '*'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true
    
  - task: PublishPipelineArtifact@0
    displayName: 'Build - Publish DLLs'
    inputs:
      artifactName: 'DebugArtefacts'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Test - Install'
    inputs:
      packageFeedSelector: 'nugetOrg'
      versionSelector: 'latestStable'

  - task: UsePythonVersion@0
    displayName: 'Test - Set up Python'
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Test - Generate .runsettings'
    inputs:
      scriptSource: 'filePath'
      scriptPath: '$(toolsLocation)/location_runsettings.py'
      arguments: '$(codeCoverageLocationRunsettings) $(testResults)'

  - task: VSTest@2
    displayName: 'Test - Run'
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      testAssemblyVer2: |
        **\x64\$(buildConfiguration)\*.test.exe
        !**\*TestAdapter.dll
        !**\obj\**
        !**\x64\$(buildConfiguration)\gmock.dll
        !**\x64\$(buildConfiguration)\gmockd.dll
        !**\x64\$(buildConfiguration)\ljwhost.dll
        !**\x64\$(buildConfiguration)\libpng16.dll
        !**\x64\$(buildConfiguration)\SDL2.dll
        !**\x64\$(buildConfiguration)\SDL2_image.dll
        !**\x64\$(buildConfiguration)\zlib1.dll
      codeCoverageEnabled: true
      runSettingsFile: '$(codeCoverageLocationRunsettings)'

  - task: PublishPipelineArtifact@0
    displayName: Coverage - Publish .xml files
    inputs:
      artifactName: 'coverage'
      targetPath: '$(testResults)'

- job: release
  # dependsOn: debug

  variables:
    buildPlatform: 'x64'
    buildConfiguration: 'Release'
    nugetPackFolder: '$(Build.SourcesDirectory)\nuget_build_folder'
    nugspecFile: '$(nugetPackFolder)\kobold-layer.nuspec'

  steps:
  - script: |
      vcpkg install sdl2:x64-windows sdl2-image:x64-windows gtest:x64-windows
      vcpkg integrate install
    displayName: vcpkg

  - task: NuGetToolInstaller@0
    displayName: 'Nuget - Install'

  - task: NuGetCommand@2
    displayName: 'Nuget - Restore Packages'
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: 'Build - Executables'
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      clean: true
      createLogFile: true
      logFileVerbosity: 'detailed'

  - task: UsePythonVersion@0
    displayName: 'NuGet - Set up Python'
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'NuGet - Generate convention-based folder'
    inputs:
      scriptSource: 'filePath'
      scriptPath: '$(toolsLocation)/prepare_nuget_convention_folder.py'
      arguments: '$(Build.SourcesDirectory) $(nugetPackFolder)'

  - task: CmdLine@2
    displayName: 'NuGet - Pack'
    inputs:
      script: 'nuget.exe pack $(nuspecFile) -Version 0.1.0-alpha+$(Build.SourceVersion)'
      workingDirectory: '$(nugetPackFolder)'

  - task: NuGetCommand@2
    displayName: 'NuGet - Push'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'aef36eec-c275-42e7-9d3e-42c9ed32aab8/13c93e06-eede-4f15-b1e8-c0af38a26329'
