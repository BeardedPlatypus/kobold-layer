trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  solution: '$(Build.SourcesDirectory)/kobold-layer.sln'

jobs:
- job: QualityVerification

  variables:
    buildPlatform: 'x64'
    buildConfiguration: 'Debug'
    codeCoverageLocationRunsettings: '$(Build.SourcesDirectory)\code_coverage_loc.runsettings'
    testResults: '$(Build.SourcesDirectory)\TestResults'
    buildWrapperExe: '$(Build.SourcesDirectory)\tools\build-wrapper-win-x86-64.exe'
    buildWrapperOutputDir: '$(Build.SourcesDirectory)\build_wrapper_output_directory'
    msBuildExe: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
    coverageOutputLocation: '$(Build.SourcesDirectory)\coverageOutput'
    toolsLocation: '$(Build.SourcesDirectory)\tools'
    coverageFiles: '$(coverageOutputLocation)\*.xml'

  steps:
  - script: |
      vcpkg install sdl2:x64-windows sdl2-image:x64-windows gtest:x64-windows
      vcpkg integrate install
    displayName: vcpkg

  - task: NuGetToolInstaller@0
    displayName: 'Nuget - Install'

  - task: NuGetCommand@2
    displayName: 'Nuget - Restore Packages'
    inputs:
      restoreSolution: '$(solution)'

  - task: SonarCloudPrepare@1
    displayName: 'SonarCloud - Prepare'
    inputs:
      SonarCloud: 'sonarcloud'
      organization: 'beardedplatypus'
      scannerMode: 'MSBuild'
      projectKey: 'BeardedPlatypus_kobold-layer'
      projectName: 'kobold-layer'
      extraProperties: |
        sonar.cfamily.build-wrapper-output=$(buildWrapperOutputDir)
        sonar.cfamily.vscoveragexml.reportsPath=$(coverageFiles)
        sonar.cfamily.cache.enabled=false
        sonar.cfamily.threads=1

  - task: PowerShell@2
    displayName: MSBuild
    inputs:
      targetType: 'inline'
      script: '& $(buildWrapperExe) --out-dir $(buildWrapperOutputDir) "$(msBuildExe)" $(solution) -nologo -p:Configuration=$(buildConfiguration) -p:Platform=$(buildPlatform)'

  - task: CopyFiles@2
    displayName: 'Build - Copy DLLs'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/x64/$(buildConfiguration)/'
      Contents: '*'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true
    
  - task: PublishPipelineArtifact@0
    displayName: 'Build - Publish DLLs'
    inputs:
      artifactName: 'DebugArtefacts'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Test - Install'
    inputs:
      packageFeedSelector: 'nugetOrg'
      versionSelector: 'latestStable'

  - task: UsePythonVersion@0
    displayName: 'Test - Set up Python'
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Test - Generate .runsettings'
    inputs:
      scriptSource: 'filePath'
      scriptPath: '$(Build.SourcesDirectory)/tools/location_runsettings.py'
      arguments: '$(codeCoverageLocationRunsettings) $(testResults)'

  - task: VSTest@2
    displayName: 'Test - Run'
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      testAssemblyVer2: |
        **\x64\$(buildConfiguration)\*.test.exe
        !**\*TestAdapter.dll
        !**\obj\**
        !**\x64\$(buildConfiguration)\gmock.dll
        !**\x64\$(buildConfiguration)\gmockd.dll
        !**\x64\$(buildConfiguration)\ljwhost.dll
        !**\x64\$(buildConfiguration)\libpng16.dll
        !**\x64\$(buildConfiguration)\SDL2.dll
        !**\x64\$(buildConfiguration)\SDL2_image.dll
        !**\x64\$(buildConfiguration)\zlib1.dll
      codeCoverageEnabled: true
      runSettingsFile: '$(codeCoverageLocationRunsettings)'

  - task: PublishPipelineArtifact@0
    displayName: 'Test - Publish .coverage files'
    inputs:
      artifactName: 'coverage'
      targetPath: '$(testResults)'

  - task: PythonScript@0
    displayName: Coverage - Convert .coverage files to .xml
    inputs:
      scriptSource: 'filePath'
      scriptPath: '$(toolsLocation)/convert_coverage.py'
      arguments: '$(testResults)'
      workingDirectory: '$(coverageOutputLocation)'

  - task: PublishPipelineArtifact@0
    displayName: Coverage - Publish .xml files
    inputs:
      artifactName: 'convertedCoverage'
      targetPath: '$(coverageOutputLocation)'

  - task: SonarCloudAnalyze@1
    displayName: 'SonarCloud - Analyze'

  - task: SonarCloudPublish@1
    displayName: 'SonarCloud - Publish'
    inputs:
      pollingTimeoutSec: '300'
